import { Component, ViewChild } from '@angular/core';
import { Platform, PopoverController, ActionSheetController, ToastController, NavParams, NavController, ViewController, AlertController } from 'ionic-angular';
import { Analyte } from '../report-details/analyte';
import { Source } from '../report-details/source';
import { Result } from '../report-details/result';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AmountValidator } from '../../validators/amount';
import { SettingsProvider } from '../../providers/settings/setting';
import { ScreenOrientation } from '@ionic-native/screen-orientation';
import { Report } from '../report-details/report';
import { PopoverPage } from '../popover/popover';
import { DataServiceProvider } from '../../providers/data-service/data-service';
import { Storage } from '@ionic/storage';

@Component({
  selector: 'page-add-item',
  templateUrl: 'add-item.html'
})
export class AddItemPage {
  //used
  dateReceived: Array<String> = [];
  sampleID: Array<String> = [];
  source;
  amount;
  unitID;
  analyteID;
  comments;
  monthYear;

  //misc
  results: Array<Result> = [];
  program;
  sampleName = 'DLSS';
  subType;
  analysisDate;

  //autogenerated [LOD, LOQ, Instrumentation]
  methodCode = [];

  //user input
  storeResults = [];
  sources: Array<Source> = [];
  analytes: Array<Analyte> = [];
  report: Report;

  //options - only unit and methods are loaded sources and analyte options are specific
  sourceOptions = [];
  analyteOptions = [];
  analytePEOptions; //disabled
  unitOptions = []; //autogenerates based on method used
  methodOptions = []; //autogenerates based on analytes used

  //temp loaders
  loadMethods;
  loadAnalytes;
  loadSources;
  loadResults;
  loadUnits;

  //appData
  navSources = [];
  navAnalytes = [];
  navUnits = [];
  navMethods = [];
  navTechnology = [];
  navResults = [];

  //css
  showDetails: Array<boolean> = [];
  icon: Array<String> = [];
  submitAttempt: boolean = false;
  selectedTheme: String = 'light';
  currentOrientation: boolean = this.platform.isPortrait();

  //checks
  boolDate: Array<boolean> = [];
  boolSampleID: Array<boolean> = [];
  boolUnit;
  boolResults: Array<boolean> = [];
  boolMonthYear;
  boolMethod: Array<boolean> = [];
  methodPlaceholder = [];

  constructor(public navParams: NavParams, private dataService: DataServiceProvider, public storage: Storage, public navCtrl: NavController, public screen: ScreenOrientation, public platform: Platform, public toastCtrl: ToastController, public view: ViewController, public formBuilder: FormBuilder, private alertCtrl: AlertController, public setting: SettingsProvider, public actionSheetCtrl: ActionSheetController, public popoverCtrl: PopoverController) {
    this.sampleName = navParams.get('sampleName');
    this.subType = navParams.get('subType');
  }

  ionViewDidLoad() {
    //load everything autogenerated
    var checker;
    this.storage.get('sources').then(data => {
      checker = data;
      if (checker === undefined || checker === null) {
        this.loadMethod();
        this.loadUnit();
        this.loadAnalyte();
        this.loadSource();
      }
      else {
        this.storage.get('sources').then(data => {
          this.sourceOptions = data;
          this.overrideData();
          console.log(data)
        });
        this.storage.get('methods').then(data => {
          this.methodOptions = data;
          this.overrideData();
          console.log(data)
        });
        this.storage.get('analytes').then(data => {
          this.analyteOptions = data;
          this.overrideData();
          console.log(data)
        });
        this.storage.get('units').then(data => {
          this.unitOptions = data;
          this.overrideData();
          console.log(data)
        });
      }
    });
    this.selectedTheme = this.navParams.get('currentTheme');
    this.setting.getActiveTheme().subscribe(val => this.selectedTheme = val);
  }

  getType(subType) {
    if (subType == 'W') {
      return 'Weekly';
    }
    else if (subType == 'M') {
      return 'Monthly';
    }
    else if (subType == 'Q') {
      return 'Quarterly';
    }
  }

  overrideData() {
    //theoretically it is possible to pull all specific data
    //from dataService by pulling result data and whenever
    //sampleName (Ex:DLSS) corresponds with the sampleName
    //of the form that the user requested, if it hasn't been
    //pulled already, grab the corresponding source, method,
    //analyte, program, unit, etc. However, because of this
    //application might suffer from performance issues and 
    //rarely do the templates change unless given an IW
    //template which vastly varies.
    if (this.sampleName == 'DLSS') {
      this.sourceOptions = ['Wards Island', 'Hunts Point', 'North River', 'Bowery Bay', 'Tallman Island', 'Red Hook', 'Newtown Creek', 'Jamaica', '26 Ward', 'Oakwood Beach', 'Port Richmond', 'Coney Island', 'Rockaway', 'Owls Head'];
      this.analyteOptions = ['Arsenic', 'Beryllium', 'Calcium', 'Cadmium', 'Chromium', 'Copper', 'Lead', 'Mercury', 'Molybdenum', 'Nickel', 'Potassium', 'Selenium', 'Zinc'];
    }
    else if (this.sampleName == 'BSS') {
      this.sourceOptions = ['Wards Island', 'Hunts Point', 'Bowery Bay', 'Red Hook', '26 Ward', 'Oakwood Beach'];
      this.analyteOptions = ['Arsenic', 'Cadmium', 'Chromium', 'Copper', 'Iron', 'Lead', 'Mercury', 'Molybdenum', 'Nickel', 'Potassium', 'Selenium', 'Silver', 'Zinc'];
    }

    //disabled for now
    else if (this.sampleName == 'PE' && this.subType == 'W') {
      this.sourceOptions = ['26 Ward', 'Coney Island', 'Jamaica', 'Rockaway']
      this.analyteOptions = ['Copper']
    }
    else if (this.sampleName == 'PE' && this.subType == 'M') {
      this.sourceOptions = ['Wards Island', 'North River', 'Hunts Point', '26 Ward', 'Coney Island', 'Owls Head', 'Newtown Creek', 'Red Hook', 'Jamaica', 'Tallman Island', 'Bowery Bay', 'Red Hook', 'Oakwood Beach', 'Port Richmond'];
      this.analyteOptions = ['Copper', 'Lead', 'Nickel', 'Silver', 'Zinc'];
      this.analytePEOptions = ['Cyanide', 'Mercury'];
      this.unitID = [];
    }
    else if (this.sampleName == 'PE' && this.subType == 'Q') {
      this.sourceOptions = ['Wards Island', 'North River', 'Hunts Point', '26 Ward', 'Coney Island', 'Owls Head', 'Newtown Creek', 'Red Hook', 'Jamaica', 'Tallman Island', 'Bowery Bay', 'Red Hook', 'Oakwood Beach', 'Port Richmond'];
      this.analyteOptions = ['Arsenic', 'Cadmium', 'Chromium', 'Lead', 'Nickel', 'Silver', 'Zinc'];

    }

    else if (this.sampleName == 'IW' && this.subType == 'IPP Metals(1)') {

    }

    //not disabled, used for testing purposes, everything autoloaded
    else if (this.sampleName == 'test') {
      //do something if needed
      this.sourceOptions = ['1', '2'];
      this.analyteOptions = ['1', '2'];
    }

    //initialize everything, report viewer, TESTING PURPOSES
    for (var l = 0; l < this.analyteOptions.length; l++) {
      this.methodPlaceholder[l] = 'Select Method';
    }

    for (var s = 0; s < this.sourceOptions.length; s++) {
      this.showDetails[s] = false;
      this.icon[s] = 'ios-add-circle-outline';
    }

    for (var k = 0; k < this.sourceOptions.length; k++) {
      this.storeResults[k] = [];
      for (var n = 0; n < this.analyteOptions.length; n++) {
        this.storeResults[k][n] = "";
      }
    }
  }

  //if method pick cancelled, fill
  sweepMethods() {
    for(var i = 0; i < this.methodPlaceholder.length; i++) {
      if(this.methodPlaceholder[i] == null || this.methodPlaceholder[i] == undefined) {
        this.methodPlaceholder[i] = "Select Method"
      }
    }
  }

  //loads everything needed
  loadMethod() {
    this.dataService.loadMethods()
      .then(data => {
        this.loadMethods = data;
        var temp = 0;
        for (var i = 0; i < this.loadMethods.length; i++) {
          if (this.methodOptions.indexOf(this.loadMethods[i].methodCode) == -1) {
            this.methodOptions[temp] = this.loadMethods[i].methodCode;
            temp++;
          }
        }
        this.overrideData();
        this.navMethods = this.methodOptions;
      });
  }

  loadUnit() {
    this.dataService.loadUnits()
      .then(data => {
        this.loadUnits = data;
        for (var i = 0; i < this.loadUnits.length; i++) {
          this.unitOptions[i] = this.loadUnits[i].unit;
        }
        this.overrideData();
        this.navUnits = this.unitOptions;
      });
  }

  loadAnalyte() {
    this.dataService.loadAnalytes()
      .then(data => {
        this.loadAnalytes = data;
        for (var i = 0; i < this.loadAnalytes.length; i++) {
          this.analyteOptions[i] = this.loadAnalytes[i].analyte;
        }
        this.overrideData();
        this.navAnalytes = this.analyteOptions;
      });
  }

  loadSource() {
    this.dataService.loadSources()
      .then(data => {
        this.loadSources = data;
        for (var i = 0; i < this.loadSources.length; i++) {
          this.sourceOptions[i] = this.loadSources[i].source;
        }
        this.overrideData();
        this.navSources = this.sourceOptions;
      });
  }

  presentPopover(methodEvent, i) {
    let popover = this.popoverCtrl.create(PopoverPage, { methods: this.methodOptions });

    popover.onDidDismiss((item) => {
      if (item !== 'n/a') {
        this.methodCode[i] = item;
        this.methodPlaceholder[i] = item;
      }
      else {
      this.sweepMethods();
      }
    });

    popover.present({
      ev: methodEvent
    });
  }

  //error: missing fields
  presentAlert() {
    let alert = this.alertCtrl.create({
      title: 'Error: Missing Fields',
      subTitle: 'Please fill out all required details correctly.',
      buttons: ['Dismiss']
    });
    alert.present();
  }

  //form $dirty
  presentConfirm() {
    let confirm = this.alertCtrl.create({
      title: 'Closing Page',
      message: 'You have unsaved changes. Are you sure you want to exit?',
      buttons: [
        {
          text: 'No',
          role: 'cancel'
        },
        {
          text: 'Yes',
          handler: () => {
            this.view.dismiss();
          }
        }
      ]
    });
    confirm.present();
  }

  backButtonAction() {
    var check = true;
    if (this.checkStoreResults()) {
      check = false;
    }
    else if (this.unitID) {
      check = false;
    }
    else if (this.monthYear) {
      check = false;
    }
    else if (this.comments) {
      check = false;
    }
    else {
      for (var i = 0; i < this.sourceOptions.length; i++) {
        if (this.sampleID[i]) {
          check = false;
        }
        if (this.dateReceived[i]) {
          check = false;
        }
      }
      for (var x = 0; x < this.analyteOptions.length; x++) {
        if (this.methodCode[x] && this.methodCode[x] !== 'Select Method') {
          check = false;
        }
      }
    }
    if (check) {
      this.view.dismiss();
    }
    else {
      this.presentConfirm();
    }
  }

  //checks if valid form to be saved
  isFilled() {
    var tempDate = true;
    var tempSample = true;
    var tempResult = true;
    var tempUnit = true;
    var tempMonthYear = true;
    var tempMethod = true;
    for (var x = 0; x < this.sourceOptions.length; x++) {
      if (!this.dateReceivedCheck(x)) {
        this.boolDate[x] = false;
        tempDate = false;
      }
      else {
        this.boolDate[x] = true;
      }
      if (!this.sampleIDCheck(x)) {
        this.boolSampleID[x] = false;
        tempSample = false;
      }
      else {
        this.boolSampleID[x] = true;
      }
    }
    for (var s = 0; s < this.analyteOptions.length; s++) {
      if (!this.methodCode[s] || this.methodCode[s] == 'Select Method') {
        this.boolMethod[s] = false;
        tempMethod = false;
      }
      else {
        this.boolMethod[s] = true;
      }
    }

    for (var i = 0; i < this.sourceOptions.length; i++) {
      if (!this.resultsFilled(i)) {
        this.boolResults[i] = false;
        tempResult = false;
      }
      else {
        this.boolResults[i] = true;
      }
    }
    if (!this.unitID) {
      this.boolUnit = false;
      tempUnit = false;
    }
    else {
      this.boolUnit = true;
    }
    if (!this.monthYear) {
      this.boolMonthYear = false;
      tempMonthYear = false;
    }
    else {
      this.boolMonthYear = true;
    }
    if (!tempDate || !tempUnit || !tempSample || !tempResult || !tempMonthYear || !tempMethod) {
      //this.presentToast();
      return false;
    }
    else {
      return true;
    }
  }


  //checks if amounts are not dirty
  checkStoreResults() {
    for (var i = 0; i < this.sourceOptions.length; i++) {
      for (var x = 0; x < this.analyteOptions.length; x++) {
        if (this.storeResults[i][x] || this.storeResults[i][x] === '') {
          return false;
        }
      }
    }

    return true;
  }

  //checks if amounts are completely filled
  resultsFilled(i) {
    for (var x = 0; x < this.analyteOptions.length; x++) {
      if (!this.storeResults[i][x] || this.storeResults[i][x] === '') {
        return false;
      }
    }
    return true;
  }

  //checks if misc fields are dirty
  monthYearCheck() {
    if (this.monthYear) {
      return true;
    }
    return false;
  }

  dateReceivedCheck(x) {
    if (this.dateReceived[x])
      return true;
    return false;
  }

  sampleIDCheck(x) {
    if (this.sampleID[x])
      return true;
    return false;
  }

  saveItem() {
    this.submitAttempt = true;

    if (this.isFilled()) {
      for (var i = 0; i < this.sourceOptions.length; i++) {
        for (var x = 0; x < this.analyteOptions.length; x++) {
          this.amount = this.storeResults[i][x];
          this.results[i] = new Result(this.dateReceived[i], this.sampleID[i], this.sourceOptions[i], this.analyteOptions[x], this.amount, '', '', this.unitID, this.methodCode, this.comments, this.sampleName, '');
        }
      }
      this.report = new Report(this.sampleName, this.sourceOptions, this.analyteOptions, this.methodCode, this.unitID, this.results, this.dateReceived, this.sampleID, this.comments, this.storeResults, this.monthYear);
      for (var n = 0; n < this.results.length; n++) {
        this.dataService.saveResult(this.results[n].getResultDBO());
      }
      var checker;
      this.storage.get('sources').then(data => {
        checker = data;
        if (checker === null || checker === undefined) {
          this.storage.set('sources', this.navSources);
          this.storage.set('analytes', this.navAnalytes);
          this.storage.set('methods', this.navMethods);
          this.storage.set('units', this.navUnits);

        }
        this.view.dismiss(this.report);
      });
    }

    else {
      this.presentAlert();
    }
  }

  toggleDetails(index) {

    if (this.showDetails[index]) {
      this.showDetails[index] = false;
      this.icon[index] = 'ios-add-circle-outline';
    } else {
      this.showDetails[index] = true;
      this.icon[index] = 'ios-remove-circle-outline';
      for (var i = 0; i < this.sourceOptions.length; i++) {
        if (i !== index) {
          this.showDetails[i] = false;
          this.icon[i] = 'ios-add-circle-outline';
        }
      }
    }
  }

  presentToast() {
    let toast = this.toastCtrl.create({
      message: 'Please enter all required fields correctly.',
      duration: 3000,
      position: 'top'
    });
    toast.present();
  }

  defaultDate(date) {
    for (var i = 0; i < this.sourceOptions.length; i++) {
      this.dateReceived[i] = date;
    }
  }

  close() {
    var check = true;
    if (this.checkStoreResults()) {
      check = false;
    }
    else if (this.unitID) {
      check = false;
    }
    else if (this.monthYear) {
      check = false;
    }
    else if (this.comments) {
      check = false;
    }
    else {
      for (var i = 0; i < this.sourceOptions.length; i++) {
        if (this.sampleID[i]) {
          check = false;
        }
        if (this.dateReceived[i]) {
          check = false;
        }
      }
      for (var x = 0; x < this.analyteOptions.length; x++) {
        if (this.methodCode[x] && this.methodCode[x] !== 'Select Method' && this.methodCode[x] !== '') {
          check = false;
        }
      }
    }

    if (check) {
      var checker;
      this.storage.get('sources').then(data => {
        checker = data;
        if (checker === null || checker === undefined) {
          this.storage.set('sources', this.navSources);
          this.storage.set('analytes', this.navAnalytes);
          this.storage.set('methods', this.navMethods);
          this.storage.set('units', this.navUnits);

        }
        this.view.dismiss();
      });
    }
    else {
      this.presentConfirm();
    }
  }
}